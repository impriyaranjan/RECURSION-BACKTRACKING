public class SolveSudoku
{
 public static void main(String[] args)
 {   int[][] arr=new int[9][9];
     String[] str={"306508400","520000000","087000031","003010080","900863005","050090600",
                    "130000250","000000074","005206300"};
    for(int i=0;i<9;i++)
        {   for(int j=0;j<9;j++)
                arr[i][j]=(str[i].charAt(j)-'0');
        }    
    display(arr);
    System.out.println("------------------Ans----------------------");
    solveSudoku(arr,0,0);
    }
    static void display(int[][] matrix)
    { for(int i=0;i < matrix.length ;i++)
      { for(int j=0;j< matrix[0].length ;j++)
        {   System.out.print(matrix[i][j]+" ");
        }
        System.out.println();  
      }
 }
 static void solveSudoku(int[][] matrix,int row,int col)
 {  if(row==matrix.length)           //base case: last row matrix se bahar chala jaye.
    { display(matrix);
       return;
    }
      int ni=0;                          //ni=next row,    nj=next col.
      int nj=0;
     if(col==matrix[0].length-1)   //next col-->out of matrix(col)-->row++ and nj=starting point;
     {  ni=row+1;
        nj=0;
     }else              //col++ and row will remain same;
     { ni=row;
       nj=col+1;
     }
    if(matrix[row][col]!=0)         //already filled-->skip to next cell(ni,nj);
    {   solveSudoku(matrix,ni,nj);
    }
    else                                //if cell not filled-->fill it with possible option;
    { for(int po=1;po<=9;po++)                      //check for all possible no[1-->9].
     { if(isValidInput(matrix,row,col,po)==true)     //if (possible option) is valid 
        { matrix[row][col]=po;   
          solveSudoku(matrix,ni,nj);
          matrix[row][col]=0;
        }
     }
    }
        
 }
 static boolean isValidInput(int[][] matrix,int x,int y,int val)
 { for(int j=0;j<matrix[0].length;j++)     //check in rows. col will increase.
   { if(matrix[x][j]==val)
        return false;
   }
   for(int i=0;i<matrix.length;i++)     //check in col. row will increase.
   { if(matrix[i][y]==val)
        return false;
   }
   int smi=x/3*3;
   int smj=y/3*3;    //formula to reach every corresponding top-left corner of submatrix.
   for(int i=0;i<3;i++)
    { for(int j=0;j<3;j++)
      { if(matrix[smi+i][smj+j]==val)
            return false;
      }
    }
     return true;
 }
}

/*
int[][]  arr={{3,0,6,5,0,8,4,0,0},{5,2,0,0,0,0,0,0,0},{0,8,7,0,0,0,0,3,1},{0,0,3,0,1,0,0,8,0},
            {9,0,0,8,6,3,0,0,5},{0,5,0,0,9,0,6,0,0},{1,3,0,0,0,0,2,5,0},{0,0,0,0,0,0,0,7,4},
            {0,0,5,2,0,6,3,0,0}};


*/
